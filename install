#!/usr/bin/env bash
set -e

# Display welcome banner
show_banner() {
  echo ""
  echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
  echo "‚îÇ  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚îÇ"
  echo "‚îÇ  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó ‚îÇ"
  echo "‚îÇ  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚îÇ"
  echo "‚îÇ  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù  ‚îÇ"
  echo "‚îÇ  ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë      ‚îÇ"
  echo "‚îÇ  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù      ‚îÇ"
  echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
  echo ""
}

# Function to print messages
info() {
  echo "‚ÑπÔ∏è  [INFO] $1"
}

# Function to print success messages
success() {
  echo "‚úÖ [SUCCESS] $1"
}

# Function to print warning messages
warning() {
  echo "‚ö†Ô∏è  [WARNING] $1"
}

# Function to print step messages
step() {
  echo "üîß [STEP] $1"
}

# General install function
install() {
  local mode="$1"
  local name="$2"

  if [[ "$mode" == "cask" ]]; then
    if ! brew list --cask "$name" >/dev/null 2>&1; then
      info "üì¶ Installing $name (cask)..."
      brew install --cask "$name"
      success "$name installed successfully!"
    else
      info "‚ú® $name already installed (cask)"
    fi
  elif [[ "$mode" == "brew" ]]; then
    if ! brew list "$name" >/dev/null 2>&1; then
      info "üç∫ Installing $name (brew)..."
      brew install "$name"
      success "$name installed successfully!"
    else
      info "‚ú® $name already installed (brew)"
    fi
  else
    warning "Unknown install mode: $mode"
    return 1
  fi
}

# Install Xcode Command Line Tools
install_xcode_tools() {
  step "üîç Checking for Xcode Command Line Tools..."
  
  if ! xcode-select -p >/dev/null 2>&1; then
    info "üõ†Ô∏è  Installing Xcode Command Line Tools..."
    xcode-select --install
    
    # Wait for installation to complete
    info "‚è≥ Waiting for Xcode Command Line Tools installation to complete..."
    until xcode-select -p >/dev/null 2>&1; do
      sleep 5
    done
    
    success "Xcode Command Line Tools installed successfully"
  else
    info "‚ú® Xcode Command Line Tools already installed"
  fi
}

# Install Homebrew
install_homebrew() {
  if ! command -v brew >/dev/null 2>&1; then
    step "üç∫ Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # Add Homebrew to PATH for the current session if just installed
    if [[ -d "/opt/homebrew/bin" ]]; then
      eval "$('/opt/homebrew/bin/brew' shellenv)"
    elif [[ -d "/usr/local/bin" ]]; then
      eval "$('/usr/local/bin/brew' shellenv)"
    fi
    success "Homebrew installed successfully"
  else
    info "‚ú® Homebrew already installed"
  fi
}

# Install packages from local Brewfile
install_packages() {
  step "üì¶ Installing packages from Brewfile..."
  
  if [[ -f "Brewfile" ]]; then
    brew bundle --file="Brewfile"
    success "All packages installed from Brewfile"
  else
    warning "Brewfile not found, skipping package installation"
  fi
}
# Setup Oh My Zsh
setup_oh_my_zsh() {
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    step "üêö Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    success "Oh My Zsh installed successfully"
  else
    info "‚ú® Oh My Zsh already installed"
  fi
}

# Setup Oh My Zsh plugins
setup_zsh_plugins() {
  local zsh_custom="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"
  
  step "üîå Installing Oh My Zsh plugins..."
  
  # zsh-autosuggestions
  if [[ ! -d "$zsh_custom/plugins/zsh-autosuggestions" ]]; then
    info "üí° Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions "$zsh_custom/plugins/zsh-autosuggestions"
    success "zsh-autosuggestions installed"
  else
    info "‚ú® zsh-autosuggestions already installed"
  fi
  
  # zsh-syntax-highlighting
  if [[ ! -d "$zsh_custom/plugins/zsh-syntax-highlighting" ]]; then
    info "üé® Installing zsh-syntax-highlighting..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting "$zsh_custom/plugins/zsh-syntax-highlighting"
    success "zsh-syntax-highlighting installed"
  else
    info "‚ú® zsh-syntax-highlighting already installed"
  fi
  
  # zsh-completions
  if [[ ! -d "$zsh_custom/plugins/zsh-completions" ]]; then
    info "üìù Installing zsh-completions..."
    git clone https://github.com/zsh-users/zsh-completions "$zsh_custom/plugins/zsh-completions"
    success "zsh-completions installed"
  else
    info "‚ú® zsh-completions already installed"
  fi
}





# Setup dotfiles with Stow
setup_dotfiles() {
  local dotfiles_dir="$(dirname "$0")/dotfiles"
  
  if [[ -d "$dotfiles_dir" ]]; then
    step "üìÅ Setting up dotfiles with Stow..."
    cd "$dotfiles_dir"
    
    # Stow all packages found in dotfiles directory
    for package in */; do
      if [[ -d "$package" ]]; then
        package_name="${package%/}"
        info "üîó Stowing $package_name..."
        stow -t "$HOME" "$package_name" 2>/dev/null || {
          warning "Could not stow $package_name (files may already exist)"
        }
      fi
    done
    
    cd - >/dev/null
    success "Dotfiles setup completed"
  else
    info "üìÇ No dotfiles directory found at $dotfiles_dir"
  fi
}

# Setup Node.js via mise
setup_nodejs() {
  step "üü¢ Setting up Node.js via mise..."
  
  # Install latest LTS Node.js
  if command -v mise >/dev/null 2>&1; then
    mise install node@lts
    mise use -g node@lts
    success "Node.js LTS installed and set as global default"
  else
    warning "mise not found, skipping Node.js setup"
  fi
}







# Configure Dock preferences
configure_dock() {
  step "üñ•Ô∏è  Configuring Dock..."
  defaults write com.apple.dock orientation -string "left"
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock autohide-delay -float 0
  defaults write com.apple.dock autohide-time-modifier -float 0.5
  defaults write com.apple.dock tilesize -int 48
  defaults write com.apple.dock show-recents -bool false
  defaults write com.apple.dock persistent-others -array
  
  # Set specific Dock apps in order (Finder is automatically first)
  defaults write com.apple.dock persistent-apps -array \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Google Chrome.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/Messages.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Slack.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Ghostty.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Cursor.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/App Store.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>' \
    '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/System Settings.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
}

# Configure Finder preferences
configure_finder() {
  step "üìÅ Configuring Finder..."
  defaults write com.apple.finder ShowPathbar -bool true
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder AppleShowAllFiles -bool true
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
}

# Configure Trackpad preferences
configure_trackpad() {
  step "üëÜ Configuring Trackpad..."
  defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false
  defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
}

# Configure Keyboard preferences
configure_keyboard() {
  step "‚å®Ô∏è  Configuring Keyboard..."
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15
}

# Configure login items
configure_login_items() {
  step "üöÄ Configuring login items..."
  
  # Rectangle Pro - window management
  if [[ -d "/Applications/Rectangle Pro.app" ]]; then
    if osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Rectangle Pro.app", hidden:false}' >/dev/null 2>&1; then
      success "Rectangle Pro added to login items"
    else
      warning "Failed to add Rectangle Pro to login items"
    fi
  fi
  
  # 1Password - password manager
  if [[ -d "/Applications/1Password 7 - Password Manager.app" ]]; then
    if osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/1Password 7 - Password Manager.app", hidden:true}' >/dev/null 2>&1; then
      success "1Password added to login items"
    else
      warning "Failed to add 1Password to login items"
    fi
  elif [[ -d "/Applications/1Password.app" ]]; then
    if osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/1Password.app", hidden:true}' >/dev/null 2>&1; then
      success "1Password added to login items"
    else
      warning "Failed to add 1Password to login items"
    fi
  fi
  
  # Raycast - launcher
  if [[ -d "/Applications/Raycast.app" ]]; then
    if osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Raycast.app", hidden:true}' >/dev/null 2>&1; then
      success "Raycast added to login items"
    else
      warning "Failed to add Raycast to login items"
    fi
  fi
}

# Configure battery preferences
configure_battery() {
  step "üîã Configuring battery preferences..."
  defaults write com.apple.menuextra.battery ShowPercent -string "YES"
}

# Configure Siri preferences
configure_siri() {
  step "ü§´ Disabling Siri..."
  defaults write com.apple.assistant.support "Assistant Enabled" -bool false
  defaults write com.apple.Siri StatusMenuVisible -bool false
  defaults write com.apple.Siri UserHasDeclinedEnable -bool true
}

# Configure text input preferences
configure_text_input() {
  step "üìù Configuring text input preferences..."
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
  defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
}

# Configure keyboard shortcuts
configure_keyboard_shortcuts() {
  step "‚å®Ô∏è  Configuring keyboard shortcuts..."
  
  # Disable Mission Control shortcuts
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 32 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 34 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 35 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 36 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 37 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 118 "<dict><key>enabled</key><false/></dict>"
  
  # Disable Spotlight CMD+Space shortcut (for Raycast)
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 64 "<dict><key>enabled</key><false/></dict>"
  
  # Disable screenshot shortcuts (for CleanShotX)
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 28 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 29 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 30 "<dict><key>enabled</key><false/></dict>"
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 31 "<dict><key>enabled</key><false/></dict>"
}

# Configure hot corners
configure_hot_corners() {
  step "üî• Disabling hot corners..."
  defaults write com.apple.dock wvous-tl-corner -int 1
  defaults write com.apple.dock wvous-tr-corner -int 1
  defaults write com.apple.dock wvous-bl-corner -int 1
  defaults write com.apple.dock wvous-br-corner -int 1
  defaults write com.apple.dock wvous-tl-modifier -int 0
  defaults write com.apple.dock wvous-tr-modifier -int 0
  defaults write com.apple.dock wvous-bl-modifier -int 0
  defaults write com.apple.dock wvous-br-modifier -int 0
}

# Remove GarageBand and Sound Library
remove_garageband() {
  step "üóëÔ∏è  Removing GarageBand and Sound Library..."
  
  if [[ -d "/Applications/GarageBand.app" ]]; then
    sudo rm -rf "/Applications/GarageBand.app"
    success "GarageBand removed"
  fi
  
  if [[ -d "/Library/Application Support/GarageBand" ]]; then
    sudo rm -rf "/Library/Application Support/GarageBand"
    success "GarageBand support files removed"
  fi
  
  if [[ -d "/Library/Audio/Apple Loops" ]]; then
    sudo rm -rf "/Library/Audio/Apple Loops"
    success "Apple Loops removed"
  fi
  
  if [[ -d "/System/Library/Components/DLSMusicDevice.component" ]]; then
    info "üîí System audio components preserved (required by system)"
  fi
}

# Remove iMovie
remove_imovie() {
  step "üóëÔ∏è  Removing iMovie..."
  
  if [[ -d "/Applications/iMovie.app" ]]; then
    sudo rm -rf "/Applications/iMovie.app"
    success "iMovie removed"
  fi
  
  if [[ -d "/Library/Application Support/iMovie" ]]; then
    sudo rm -rf "/Library/Application Support/iMovie"
    success "iMovie support files removed"
  fi
  
  if [[ -d "$HOME/Movies/iMovie Library.imovielibrary" ]]; then
    rm -rf "$HOME/Movies/iMovie Library.imovielibrary"
    success "iMovie library removed"
  fi
}

# Configure computer name
configure_computer_name() {
  step "üíª Setting up computer name..."
  
  echo "Please enter the desired computer name:"
  read -r computer_name < /dev/tty
  
  if [[ -n "$computer_name" ]]; then
    info "üè∑Ô∏è  Setting computer name to: $computer_name"
    sudo scutil --set ComputerName "$computer_name"
    sudo scutil --set LocalHostName "$computer_name"
    sudo scutil --set HostName "$computer_name"
    success "Computer name configured successfully"
  else
    warning "No computer name provided, skipping..."
  fi
}

# Configure Cloudflare DNS
configure_dns() {
  step "üåê Configuring Cloudflare DNS (1.1.1.1)..."
  
  # Get all network services
  while IFS= read -r service; do
    if [[ -n "$service" ]]; then
      info "üîß Setting DNS for: $service"
      sudo networksetup -setdnsservers "$service" 1.1.1.1 1.0.0.1
    fi
  done < <(networksetup -listallnetworkservices | grep -v "An asterisk")
  
  success "Cloudflare DNS configured for all network interfaces"
}



# Apply all macOS configurations
configure_macos() {
  step "‚öôÔ∏è  Configuring macOS system preferences..."
  
  configure_dock
  configure_finder
  configure_trackpad
  configure_keyboard
  configure_login_items
  configure_battery
  configure_siri
  configure_text_input
  configure_keyboard_shortcuts
  configure_hot_corners
  
  # Restart affected applications
  info "üîÑ Restarting Dock and Finder..."
  killall Dock
  killall Finder
  
  success "macOS system preferences configured"
}

# Show completion message
show_completion() {
  echo ""
  echo "üéâ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üéâ"
  echo "                                                                                    "
  echo "                            üéä SETUP COMPLETE! üéä                                    "
  echo "                                                                                    "
  echo "    Your macOS development environment has been successfully configured! üöÄ         "
  echo "                                                                                    "
  echo "    üìã What was installed and configured:                                          "
  echo "       ‚Ä¢ üõ†Ô∏è  Xcode Command Line Tools                                              "
  echo "       ‚Ä¢ üç∫ Homebrew package manager                                               "
  echo "       ‚Ä¢ üì¶ Development packages from Brewfile                                     "
  echo "       ‚Ä¢ üêö Oh My Zsh with useful plugins                                          "
  echo "       ‚Ä¢ üìÅ Dotfiles configuration                                                 "
  echo "       ‚Ä¢ üü¢ Node.js LTS via mise                                                   "
  echo "       ‚Ä¢ üîß Git configuration                                                      "
  echo "       ‚Ä¢ ‚öôÔ∏è  macOS system preferences                                              "
  echo "                                                                                    "
  echo "    üîÑ Please log out and back in for all changes to take effect.                 "
  echo "                                                                                    "
  echo "    Happy coding! üíª‚ú®                                                             "
  echo "                                                                                    "
  echo "üéâ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê üéâ"
  echo ""
}

# Main execution
main() {
  show_banner
  step "üöÄ Starting macOS setup..."
  
  configure_computer_name
  configure_dns
  install_xcode_tools
  install_homebrew
  install_packages
  setup_oh_my_zsh
  setup_zsh_plugins
  setup_dotfiles
  setup_nodejs
  remove_garageband
  remove_imovie
  configure_macos
  
  show_completion
}

# Run main function
main 